CREATE OR REPLACE PACKAGE ut_try_catch_finally AS

    description CONSTANT VARCHAR2(255) := 'try-catch-finally';

    PROCEDURE before_each;

    PROCEDURE fnc_a_try_normal_finally(d IN VARCHAR2 := 'try-catch-finally-va function: tries executing code, executes normally and executes finally block');

    PROCEDURE fnc_a_try_catch_finally(d IN VARCHAR2 := 'try-catch-finally-va function: tries executing code, catches expected exception, executes finally block');

    PROCEDURE fnc_a_try_not_catch_finally(d IN VARCHAR2 := 'try-catch-finally-va function: tries executing code, does not catch unexpected exception, executes finally block and raises exception');

    PROCEDURE fnc_b_try_normal_finally(d IN VARCHAR2 := 'try-catch-finally-vb function: tries executing code, executes normally and executes finally block');

    PROCEDURE fnc_b_try_catch_finally(d IN VARCHAR2 := 'try-catch-finally-vb function: tries executing code, catches expected exception, executes finally block');

    PROCEDURE fnc_b_try_not_catch_finally(d IN VARCHAR2 := 'try-catch-finally-vb function: tries executing code, does not catch unexpected exception, executes finally block and raises exception');

END;
/
CREATE OR REPLACE PACKAGE BODY ut_try_catch_finally AS

    SUBTYPE typ_step IS VARCHAR2(30);
    g_step_try                   CONSTANT typ_step := 'try';
    g_step_normal                CONSTANT typ_step := 'normal';
    g_step_finally               CONSTANT typ_step := 'finally';
    g_step_catch_expected        CONSTANT typ_step := 'catch_expected';
    g_step_catch_unexp_and_raise CONSTANT typ_step := 'catch_unexp_and_raise';

    g_raise_on_step typ_step;

    SUBTYPE typ_exception_code IS INTEGER;

    g_expected_exception_wo_return typ_exception_code := -20001;
    e_expected_exception_wo_return EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_expected_exception_wo_return, -20001);

    g_expected_exception_return typ_exception_code := -20002;
    e_expected_exception_return EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_expected_exception_return, -20002);

    g_unexpected_exception typ_exception_code := -20003;
    e_unexpected_exception EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_unexpected_exception, -20003);

    SUBTYPE typ_method_result IS INTEGER;

    g_result_normal CONSTANT typ_method_result := 1;
    g_result_catch  CONSTANT typ_method_result := 2;

    TYPE typ_log_tab IS TABLE OF INTEGER INDEX BY VARCHAR2(30);
    gtab_log typ_log_tab;

    --------------------------------------------------------------------------------  
    PROCEDURE before_each IS
    BEGIN
        gtab_log.delete;
    END;

    --------------------------------------------------------------------------------  
    PROCEDURE log(a_value_in IN VARCHAR2) IS
    BEGIN
        gtab_log(a_value_in) := 1;
    END;

    --------------------------------------------------------------------------------
    FUNCTION has_been_called(a_value_in IN VARCHAR2) RETURN BOOLEAN IS
    BEGIN
        RETURN gtab_log.exists(a_value_in);
    END;

    --------------------------------------------------------------------------------
    PROCEDURE helper_raise_on_step
    (
        a_current_step_in IN typ_step,
        a_exception_in    IN typ_exception_code
    ) IS
    BEGIN
        IF a_current_step_in = g_raise_on_step
        THEN
            pete_assert.pass('Rise unexpected exception on step "' ||
                             a_current_step_in || '"');
            raise_application_error(a_exception_in, 'Exception!');
        END IF;
    END;

    --------------------------------------------------------------------------------
    FUNCTION fa_try_catch_finally
    (
        a_raise_on_step_in IN typ_step DEFAULT NULL,
        a_exception_in     IN typ_exception_code DEFAULT NULL
    ) RETURN typ_method_result IS
        --------------------------------------------------------------------------------
        PROCEDURE finally IS
        BEGIN
            log(g_step_finally);
            --TODO: implement finally code here
            --TODO: do not change result here - BAD PRACTICE
        END;
        --ensures that finally is called before returning from method
        --------------------------------------------------------------------------------
        FUNCTION the_result(a_value_in IN typ_method_result)
            RETURN typ_method_result IS
        BEGIN
            finally;
            RETURN a_value_in;
        END;
    BEGIN
        g_raise_on_step := a_raise_on_step_in;
        --TODO: implement try block code here
        log(g_step_try);
        helper_raise_on_step(a_current_step_in => g_step_try,
                             a_exception_in    => a_exception_in);
        log(g_step_normal);
        RETURN the_result(g_result_normal);
    EXCEPTION
        WHEN e_expected_exception_return THEN
            --TODO: handle caught exception
            log(g_step_catch_expected);
            RETURN the_result(g_result_catch);
        WHEN OTHERS THEN
            log(g_step_catch_unexp_and_raise);
            finally;
            RAISE;
    END;

    --------------------------------------------------------------------------------
    FUNCTION fb_try_catch_finally
    (
        a_raise_on_step_in IN typ_step DEFAULT NULL,
        a_exception_in     IN typ_exception_code DEFAULT NULL
    ) RETURN typ_method_result IS
        l_result typ_method_result;
        --------------------------------------------------------------------------------
        PROCEDURE finally IS
        BEGIN
            log(g_step_finally);
            --TODO: implement finally code here
            --TODO: do not change result here - BAD PRACTICE
        END;
        --------------------------------------------------------------------------------
        PROCEDURE try_catch IS
        BEGIN
            g_raise_on_step := a_raise_on_step_in;
            --TODO: implement try block code here
            log(g_step_try);
            helper_raise_on_step(a_current_step_in => g_step_try,
                                 a_exception_in    => a_exception_in);
            log(g_step_normal);
            l_result := g_result_normal;
        EXCEPTION
            WHEN e_expected_exception_return THEN
                --TODO: handle caught exception
                log(g_step_catch_expected);
                l_result := g_result_catch;
        END;
    BEGIN
        BEGIN
            try_catch;
        EXCEPTION
            WHEN OTHERS THEN
                log(g_step_catch_unexp_and_raise);
                finally;
                RAISE;
        END;
        finally;
        RETURN l_result;
    END;

    --------------------------------------------------------------------------------
    PROCEDURE fnc_a_try_normal_finally(d IN VARCHAR2) IS
        l_result INTEGER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        l_result := fa_try_catch_finally;
        --assert
        pete_assert.this(has_been_called(g_step_try), 'try has been called');
        pete_assert.this(has_been_called(g_step_normal),
                         ' it finished normally');
        pete_assert.this(has_been_called(g_step_finally),
                         'and finally has been called');
        pete_assert.eq(a_expected_in => g_result_normal,
                       a_actual_in   => l_result,
                       a_comment_in  => 'function returned expected value from normal execution');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE fnc_a_try_catch_finally(d IN VARCHAR2) IS
        l_result INTEGER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        l_result := fa_try_catch_finally(a_raise_on_step_in => g_step_try,
                                      a_exception_in     => g_expected_exception_return);
        --assert
        pete_assert.this(has_been_called(g_step_try),
                         g_step_try || ' try has been called');
        pete_assert.this(has_been_called(g_step_catch_expected),
                         g_step_catch_expected ||
                         ' it failed with expected exception which has been caught');
        pete_assert.this(has_been_called(g_step_finally),
                         g_step_finally || ' finally has been called');
        pete_assert.eq(a_expected_in => g_result_catch,
                       a_actual_in   => l_result,
                       a_comment_in  => 'function returned expected result from catch');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE fnc_a_try_not_catch_finally(d IN VARCHAR2) IS
        l_result INTEGER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        BEGIN
            l_result := fa_try_catch_finally(a_raise_on_step_in => g_step_try,
                                          a_exception_in     => g_unexpected_exception);
        EXCEPTION
            WHEN OTHERS THEN
                pete_assert.eq(a_expected_in => g_unexpected_exception,
                               a_actual_in   => SQLCODE,
                               a_comment_in  => 'unexpected exception has been re-raised');
        END;
        --assert
        pete_assert.this(a_value_in   => has_been_called(g_step_try),
                         a_comment_in => 'try has been called');
        pete_assert.this(a_value_in   => has_been_called(g_step_catch_unexp_and_raise),
                         a_comment_in => 'it failed with unexpected exception which has been caught');
        pete_assert.this(a_value_in   => has_been_called(g_step_finally),
                         a_comment_in => 'finally has been called');
        pete_assert.is_null(a_value_in   => l_result,
                            a_comment_in => 'returned value is null');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE fnc_b_try_normal_finally(d IN VARCHAR2) IS
        l_result INTEGER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        l_result := fb_try_catch_finally;
        --assert
        pete_assert.this(has_been_called(g_step_try), 'try has been called');
        pete_assert.this(has_been_called(g_step_normal),
                         ' it finished normally');
        pete_assert.this(has_been_called(g_step_finally),
                         'and finally has been called');
        pete_assert.eq(a_expected_in => g_result_normal,
                       a_actual_in   => l_result,
                       a_comment_in  => 'function returned expected value from normal execution');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE fnc_b_try_catch_finally(d IN VARCHAR2) IS
        l_result INTEGER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        l_result := fb_try_catch_finally(a_raise_on_step_in => g_step_try,
                                      a_exception_in     => g_expected_exception_return);
        --assert
        pete_assert.this(has_been_called(g_step_try),
                         g_step_try || ' try has been called');
        pete_assert.this(has_been_called(g_step_catch_expected),
                         g_step_catch_expected ||
                         ' it failed with expected exception which has been caught');
        pete_assert.this(has_been_called(g_step_finally),
                         g_step_finally || ' finally has been called');
        pete_assert.eq(a_expected_in => g_result_catch,
                       a_actual_in   => l_result,
                       a_comment_in  => 'function returned expected result from catch');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE fnc_b_try_not_catch_finally(d IN VARCHAR2) IS
        l_result INTEGER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        BEGIN
            l_result := fb_try_catch_finally(a_raise_on_step_in => g_step_try,
                                          a_exception_in     => g_unexpected_exception);
        EXCEPTION
            WHEN OTHERS THEN
                pete_assert.eq(a_expected_in => g_unexpected_exception,
                               a_actual_in   => SQLCODE,
                               a_comment_in  => 'unexpected exception has been re-raised');
        END;
        --assert
        pete_assert.this(a_value_in   => has_been_called(g_step_try),
                         a_comment_in => 'try has been called');
        pete_assert.this(a_value_in   => has_been_called(g_step_catch_unexp_and_raise),
                         a_comment_in => 'it failed with unexpected exception which has been caught');
        pete_assert.this(a_value_in   => has_been_called(g_step_finally),
                         a_comment_in => 'finally has been called');
        pete_assert.is_null(a_value_in   => l_result,
                            a_comment_in => 'returned value is null');
    END;

END;
/
